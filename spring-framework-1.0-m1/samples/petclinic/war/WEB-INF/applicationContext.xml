<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
  - Root application context definition for a web app that uses JDBC.
  -
  - Does not depend on web infrastructure or any web-specific classes!
  - Assumes running in a J2EE environment in the "dataSource" definition, as
  - it looks for a "java:comp/env/jdbc/myds" JNDI DataSource, but that can be
  - replaced easily (as noted). Such a context definition can thus be reused
  - in test environments or standalone applications without any hassle.
  -->
  
<beans>		

<!-- ========================= GENERAL DEFINITIONS ========================= -->

	<!--
	  - The message source for this context, loaded from localized "messages_xx" files
	  - in the classpath, i.e. "/WEB-INF/classes/messages.properties" or
	  - "/WEB-INF/classes/messages_de.properties".
	  -
	  - "getMessage" calls to this context will use this source.
	  - Child contexts can have their own message sources, inheriting all messages from this
	  - source, being able to define new messages and override ones defined in this source.
	  -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">	
		<property name="basename"><value>messages</value></property>										
	</bean>

<!-- ========================= Start of PERSISTENCE DEFINITIONS ========================= -->
  
	<!-- NOTE: In the PERSISTENCE DEFINITIONS section, choose exactly 1
             "dataSource" bean and edit the class of the "clinic" bean. -->

	<!-- NOTE: For each JNDI DataSource reference, the respective DriverManagerDataSource
	           definition can be used as an alternative (e.g. to avoid container-specific
						 JNDI setup for development environments). -->

	<!--
	  - DriverManagerDataSource is an alternative DataSource for non-J2EE environments.
	  - Can be used as a drop-in replacement for JNDI DataSource definitions, as all
	  - objects that depend on it will still get their expected DataSource reference,
	  - just a different one from a different source.
	  -
	  - DriverManagerDataSource simply creates a new Connection on each getConnection
	  - call, it doesn't pool. Consider Apache's Jakarta Commons DBCP for a real pool,
	  - defining a org.apache.commons.dbcp.BasicDataSource here, with same parameters.
	  -->
	  
	<!-- HSQL DataSource for non-J2EE environments. -->
	<!---->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"><value>org.hsqldb.jdbcDriver</value></property>
		<property name="url"><value>jdbc:hsqldb:hsql://localhost:9001</value></property>
		<property name="username"><value>sa</value></property>
		<property name="password"><value></value></property>
	</bean>
	<!---->

	<!--
	  - Makes a JNDI DataSource available as bean reference, assuming a J2EE environment.
	  - By default, "java:comp/env/" will be prepended if not already specified.
	  -->
	<!-- HSQL JNDI DataSource for J2EE environments. -->
	<!--
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
	  	<property name="jndiName"><value>jdbc/petclinicHSQL</value></property>
	</bean>
	-->
	
	<!-- MYSQL DataSource for non-J2EE environments. -->
	<!--
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"><value>com.mysql.jdbc.Driver</value></property>
		<property name="url"><value>jdbc:mysql://localhost:3306/petclinic</value></property>
		<property name="username"><value>pc</value></property>
		<property name="password"><value>pc</value></property>
	</bean>
	-->

	<!-- MYSQL DataSource for J2EE environments. -->
	<!--
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName"><value>jdbc/petclinicMYSQL</value></property>
	</bean>
	-->

	<!-- petclinic primary Business Object : Default implementation -->
	<bean id="clinic" class="petclinic.jdbc.HsqlClinic">
    	<property name="dataSource"><ref bean="dataSource"/></property>
	</bean>

<!-- ========================= End of PERSISTENCE DEFINITIONS ========================= -->
	
</beans>
